# Taken from https://github.com/cloudflare/wrangler/blob/master/azure-pipelines.yml
trigger:
  - main
  - refs/tags/*

jobs:
  - job: test_lint
    displayName: "Run tests, fmt, and clippy"
    pool:
      vmImage: ubuntu-latest
    steps:
      - template: ci/azure-install-rust.yml
      - script: cargo test --locked
        displayName: "cargo test --locked"
      - script: cargo fmt --all -- --check
        displayName: "cargo fmt"
      - script: cargo clippy
        displayName: "cargo clippy"

  - job: test_lint_windows
    displayName: "Run tests (Windows)"
    pool:
      vmImage: windows-latest
    steps:
      - template: ci/azure-install-rust.yml
      - script: cargo test --locked
        displayName: "cargo test --locked"

  - job: test_lint_nightly
    displayName: "Run tests (nightly)"
    pool:
      vmImage: ubuntu-latest
    steps:
      - template: ci/azure-install-rust.yml
        parameters:
          toolchain: nightly
      - script: cargo test --locked
        displayName: "cargo test --locked"

  - job: dist_linux
    displayName: "Dist Linux binary"
    pool:
      vmImage: ubuntu-latest
    steps:
      - template: ci/azure-install-rust.yml
      - script: ./ci/install.sh
      - template: ci/azure-collect-binaries.yml
        parameters:
          name: dist_linux

  - job: dist_darwin
    displayName: "Dist Darwin binary"
    pool:
      vmImage: macOS-latest
    steps:
      - template: ci/azure-install-rust.yml
      - script: ./ci/install.sh
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.7
      - template: ci/azure-collect-binaries.yml
        parameters:
          name: dist_darwin

  - job: dist_windows
    displayName: "Dist Windows binary"
    pool:
      vmImage: windows-latest
    steps:
      - template: ci/azure-install-rust.yml
      - bash: ./ci/install.sh
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static
      - template: ci/azure-collect-binaries.yml
        parameters:
          name: dist_windows

  - job: deploy
    dependsOn:
      - dist_linux
      - dist_darwin
      - dist_windows
    displayName: "Deploy release binaries"
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: DownloadPipelineArtifact@0
        displayName: "Download dist - windows"
        inputs:
          artifactName: dist_windows
          targetPath: tmp/windows
      - task: DownloadPipelineArtifact@0
        displayName: "Download dist - linux"
        inputs:
          artifactName: dist_linux
          targetPath: tmp/linux
      - task: DownloadPipelineArtifact@0
        displayName: "Download dist - darwin"
        inputs:
          artifactName: dist_darwin
          targetPath: tmp/darwin
      - script: |
          set -ex
          mkdir -p gh-release
          find .
          tag=`git describe --tags`
          mk() {
            target=$1
            src=$2
            for binary in $(find tmp/$src -type f); do
              chmod +x $binary
              name=$(basename $binary .exe)-$tag-$target
              find .
              mkdir -p tmp/$name
              cp README.md \
                LICENSE-MIT \
                LICENSE-APACHE \
                $binary \
                tmp/$name
              tar czvf gh-release/$name.tar.gz -C tmp $name
            done
          }
          mk x86_64-unknown-linux-gnu linux
          mk x86_64-apple-darwin darwin
          mk x86_64-pc-windows-msvc windows
        displayName: "prepare the github releases tarball artifacts"
      - task: PublishPipelineArtifact@0
        displayName: "publish gh_release artifact"
        inputs:
          artifactName: gh_release
          targetPath: gh-release
      - task: GithubRelease@0
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: "Create GitHub Release"
        inputs:
          gitHubConnection: github-token
          repositoryName: jaysonsantos/cli-utils-rs
          assets: gh-release/*.tar.gz
